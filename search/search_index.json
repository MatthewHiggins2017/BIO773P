{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Programming in R","text":"<p>Welcome to programming in R, introduction course!</p>"},{"location":"practicals/pt-0/","title":"Practical 0 - Introduction to basic data structures","text":""},{"location":"practicals/pt-0/#introduction","title":"Introduction","text":"<p>This practical series is aimed at teaching basic programming in R.  You may already be familiar with R from introductions to statistics, and so some of the material covered here should be fairly straightforward. However! The ultimate aim of these practicals differs from your previous work in that the focus will be on creating, accessing, and manipulating data structures. As this is often the first step in real scientific research, you will find that the skills you develop here will be invaluable to you later on in your studies!  It's also a general (though very simple) introduction to programming: the stuff we will be learning about exists in most other programming languages.</p> <p>We will not be covering any stats in these practicals. However, do not relax too much, as these practicals will move fairly quickly, and you will need to stay focused in order to do well in the final exam. Make use of R\u2019s help system (and http://duckduckgo.com, your neighbour, and if you're really stuck don't be afraid to ask a demonstrator.</p>"},{"location":"practicals/pt-0/#the-environment","title":"The environment","text":"<p>To start with, let us reacquaint ourselves with the R environment. First of all, launch R (or RStudio).</p> <p>The main window you where you talk directly to R is called the console. This is where you run lines of code. Often, we prefer typing in a separate window in a separate file called a script. Try typing `1 + 2`` in this window and pressing return. Notice that no output is produced - the cursor just moves to the next line. This is because a script is fundamentally different from the console and in fact works just like any other text editor. In order to run the code that we have written in a script we need to select the line(s) that we want to run and hit Run, or type shift-enter or control-enter. This copies the selected line(s) over to the console and evaluates them in the order they are written. In this way we can create a long sequence of commands in a way that would not be possible by working directly in the console. Using a script also helps for keeping track of what we did. In general you should work mainly with scripts and limit your direct use of the console.</p> <p>We strongly suggest that you write anything you want to keep in scripts and that you save these scripts somewhere. (Scripts are just text files; most people use up using other text editors, such as emacs, VS Code, TextWrangler, or they run R using RStudio; all these options make the code prettier and easier to read).</p> <p>Also keep in mind that the R help is extremely good. Just put a question mark before any function that you do not understand (e.g. <code>?length</code>) to bring up the help file for that function. There are also many R websites and forums that you may find useful. The best way to learn any programming language is to fiddle - so please fiddle away with these tools to guide you!</p>"},{"location":"practicals/pt-0/#variables","title":"Variables","text":"<p>A variable is a symbolic way of storing a particular set of values and/or characters. For example, try typing</p> <p><pre><code>x &lt;- 5\ny &lt;- 225\n</code></pre> into the console and hitting return. This assigns the number <code>5</code> to the symbol <code>x</code>. You can run operations on variables (e.g. <code>3*x^2</code>), create new variables from existing variables (e.g. <code>y &lt;- 3*x^2</code>), and reassign existing variables to a new value (e.g.<code>x &lt;- 3*x^2</code>; try running that a few times).</p> <p>Please always use <code>&lt;-</code> for assignment. When in doubt about how to write something, check the tidyverse style guide; it provides standard guidelines which most R users do or should follow.</p> <p>You can name variables almost anything you want. Try using descriptive names (avoiding <code>x</code> and <code>y</code>), and using \"_\" to separate words. As a rule of thumb, remember to make your code easily understandable for other people, including your future self.</p> <p>Finally some variable names are not allowed. Typing <code>?make.names</code> in the console brings up a help file describing the important variable name restrictions.</p>"},{"location":"practicals/pt-0/#q1-create-a-new-variable-z-out-of-the-values-in-x-and-y-you-can-choose-any-formula-you-want-for-z-as-long-as-it-contains-both-x-and-y","title":"Q1. Create a new variable, <code>z</code>, out of the values in <code>x</code> and <code>y</code>. You can choose any formula you want for <code>z</code>, as long as it contains both <code>x</code> and <code>y</code>.","text":""},{"location":"practicals/pt-0/#data-classes","title":"Data classes","text":"<p>There are several classes (or types) of data.  The class of your data tells you whether R interprets the data as numbers, letters, factors (i.e. categories), logical values or a number of alternatives. You can use the function <code>class()</code> to check the class of a variable.</p> <p>You will probably have seen numeric (<code>x &lt;- 5</code>) and character variables (<code>x &lt;- \"hello\"</code>). An important class of data that you might not be familiar with is logical data. Simply put, logical data can only take one of two possible values: <code>TRUE</code> or <code>FALSE</code>. There are a number of different ways of arriving at a logical variable. The most obvious is to simply define a variable as true, for example:</p> <pre><code>x &lt;- TRUE\n</code></pre> <p>or false, for example</p> <pre><code>x &lt;- FALSE\n</code></pre> <p>Try creating a logical variable in this way and look at the class of the variable - if you have done it correctly it should read \"logical\" (keep in mind that R is case-sensitive, i.e. <code>x &lt;- false</code> will throw an error).</p> <p>However, this is not the way that logical variables tend to be used in programming. We often create logical variables through a particular type of calculation, called a logical expression. You can think of a logical expression as a statement (or a question) that we send to R, which may be a true statement, or it may be a lie! For example, try evaluating the code</p> <pre><code>5 &gt; 4\n</code></pre> <p>This statement is clearly true and accordingly R returns a value <code>TRUE</code>. The statement</p> <p><pre><code>5 &lt; 4\n</code></pre> on the other hand, returns the value <code>FALSE</code>. We can assign this logical value to a variable by using the logical expression as input to the variable. This sounds complicated, but in practice it is very simple. Take the example</p> <pre><code>x &lt;- (5 &gt; 4)\n</code></pre> <p>You can read the expression above as \"the variable x is assigned the outcome of the logical expression 5 &gt; 4\". In this particular example the variable <code>x</code> will get the value <code>TRUE</code>. Notice that the logical expression itself is within parentheses. This is not strictly required, but is good coding practice as it avoids confusion between the assignment symbol and the logical expression.</p> <p>The main logical operators that you should be familiar with are the following:</p> <ul> <li><code>&gt;</code> is greater than</li> <li><code>&lt;</code> is less than</li> <li><code>&gt;=</code> is greater than or equal to</li> <li><code>&lt;=</code> is less than or equal to</li> <li><code>==</code> is equal to</li> <li><code>!=</code> is not equal to</li> </ul> <p>Play around with some of these operators in your own made-up logical expressions. Make sure you are comfortable assigning a logical value to a variable.</p> <p>We can create more sophisticated logical expressions using the \"and\" command and the \"or\" command. The \"and\" command is written <code>&amp;</code> and called ampersand (keyboard shortcut Shift+7), while the \"or\" command is written <code>|</code> and called a \"pipe\" or vertical bar (keyboard shortcut Shift+\\ on a standard Windows keyboard). These \"operators\" can be placed between two or more logical expressions - exactly as you would do in a spoken sentence. For example, the expression</p> <p><pre><code>(x &gt; 5) &amp; (x &lt;= 10)\n</code></pre> can be read \"x is greater than five, and x is less than or equal to ten\". Similarly, the expression</p> <pre><code>(x &lt; 6) | (x == 12)\n</code></pre> <p>can be read \"x is less than six, or x is equal to twelve\". By using a combination of these operators, while making good use of parentheses, it is possible to come up with some quite complex statements.</p> <p>A short note on classes:</p> <p>It's easy to get numeric and character data confused. For example, in <code>x &lt;- \"blue\"</code>, <code>x</code> is of class \"character\", while in <code>x &lt;- 4</code>, <code>x</code> is of class \"numeric\". The problem comes if you type:</p> <pre><code>x &lt;- \"4\"\n</code></pre> <p>In this case <code>x</code> is of class \"character\" because of the quotation marks. Try typing <code>class(x)</code> if you are confused. You can also type <code>is.numeric(x)</code> and <code>is.character(x)</code>.</p>"},{"location":"practicals/pt-0/#q2-let-us-define-the-variable-x-10-what-will-the-outcome-of-the-following-expressions-be","title":"Q2. Let us define the variable <code>x &lt;- 10</code>. What will the outcome of the following expressions be?","text":"<ul> <li><code>(x &gt; 5)</code></li> <li><code>(x &lt;= 10)</code></li> <li><code>(x != 10)</code></li> <li><code>(x &lt; 5) &amp; (x &lt; 105)</code></li> <li><code>(x &lt; 4) | (x &gt; 14) | (x == 10)</code></li> </ul>"},{"location":"practicals/pt-0/#q3-below-are-some-of-the-rules-that-logical-operators-follow-write-in-plain-english-what-it-means","title":"Q3. Below are some of the rules that logical operators follow. Write in plain English what it means.","text":"<ul> <li><code>TRUE &amp; TRUE</code> is <code>TRUE</code></li> <li><code>TRUE &amp; FALSE</code> is <code>FALSE</code></li> <li><code>FALSE &amp; TRUE</code> is <code>FALSE</code></li> <li><code>TRUE | FALSE</code> is <code>TRUE</code></li> <li><code>FALSE | TRUE</code> is <code>TRUE</code></li> </ul>"},{"location":"practicals/pt-0/#q4-given-three-variables-x-y-and-z-how-would-you-write-the-following-sentence-in-a-logical-expression","title":"Q4. Given three variables (<code>x</code>, <code>y</code> and <code>z</code>), how would you write the following sentence in a logical expression?","text":"<p>The variable <code>x</code> is less than variable <code>y</code>, or greater than variable <code>z</code>?</p>"},{"location":"practicals/pt-0/#types-of-objects","title":"Types of Objects","text":""},{"location":"practicals/pt-0/#scalars-and-vectors","title":"Scalars and vectors","text":"<p>Objects can be of different types. So far, we have looked at scalar objects, which contain a single variable (e.g. <code>x &lt;- 3</code>). Another very common type of object is the vector, which is an object containing several elements:</p> <pre><code>numeric_vec   &lt;- c(1, 1, 2, 3, 5, 8)   # c is a function for combining values into a vector or list.\nseq_vec1      &lt;- seq(from = 10, to = 5) \nseq_vec2      &lt;- seq(from = 0, to = 10, by = 0.25)\nrep_vec       &lt;- rep(x = 2, times = 12)\ncharacter_vec &lt;- c(\"How\", \"Now\", \"Brown\", \"Cow\")\nlogical_vec   &lt;- c(TRUE, TRUE, FALSE, TRUE, TRUE, FALSE)\n</code></pre> <p>As you know by now, R is good at manipulating these vectors, with easy ways of accessing individual elements of a vector by using scalar objects as index (e.g. <code>x[3]</code>) and of applying simple operations on all elements of the vector (e.g. <code>vec1 * 3</code> or <code>vec1 * vec2</code> - make sure you understand what R is doing here). You can also use vectors to access a set of elements (e.g. <code>x[seq(from = 1, to = 5)]</code>) or specific elements (e.g. <code>x[c(2, 7, 9)]</code>) of a vector or variable. Remember that, for some calculations between different vectors, the vectors need to be compatible. This generally means they have lengths that are multiple of each other. Note that in R, the first position of a vector has the index 1, unlike in some other programming languages where the first position has the index 0.</p>"},{"location":"practicals/pt-0/#q5-what-number-would-you-obtain-if-you-typed-seq_vec23-in-the-console-try-working-this-out-for-yourself-before-typing-it-into-r","title":"Q5. What number would you obtain if you typed <code>seq_vec2[3]</code> in the console? (try working this out for yourself before typing it into R)","text":""},{"location":"practicals/pt-0/#q6-what-happens-when-you-type-seq_vec2seqfrom-1-to-5-in-the-console-and-hit-return","title":"Q6. What happens when you type <code>seq_vec2[seq(from = 1, to = 5)]</code> in the console and hit return?","text":""},{"location":"practicals/pt-0/#q7-how-would-you-retrieve-just-the-8th-13th-and-21st-elements-of-seq_vec2","title":"Q7. How would you retrieve just the 8th, 13th and 21st elements of <code>seq_vec2</code>?","text":"<p>Simple calculations can be performed on vectors, in which case the operation is applied to every element of the vector separately. For example, try typing</p> <pre><code>numeric_vec_squared &lt;- numeric_vec ^ 2\n</code></pre> <p>in the console. You will find that <code>numeric_vec_squared</code> contains values taken from <code>numeric_vec</code>, where each element has been squared individually. Similarly, you can create logical expressions that apply to the whole matrix, such as <code>numeric_vec &gt; 3</code></p> <p>You can also perform operations involving several vectors, as long as the vectors have compatible lengths. For example, try typing</p> <pre><code>combined_vec1 &lt;- numeric_vec * seq_vec1\n</code></pre> <p>You will find that each of the elements of <code>combined_vec1</code> is equal to the product of the corresponding elements in <code>numeric_vec</code> and <code>seq_vec1</code></p>"},{"location":"practicals/pt-0/#q8-try-evaluating-combined_vec2-numeric_vec-seq_vec2-in-the-console-what-happens-why","title":"Q8. Try evaluating <code>combined_vec2 &lt;- numeric_vec * seq_vec2</code> in the console. What happens? Why?","text":""},{"location":"practicals/pt-0/#q9-what-do-you-type-to-find-the-length-of-a-vector","title":"Q9. What do you type to find the length of a vector?","text":""},{"location":"practicals/pt-0/#q10-in-fact-compatible-does-not-mean-that-vectors-have-to-be-exactly-the-same-length-try-evaluating-combined_vec3-numeric_vec-rep_vec-in-the-console-and-look-at-the-result-what-is-the-reasoning-behind-the-values-produced","title":"Q10. In fact, compatible does not mean that vectors have to be exactly the same length. Try evaluating <code>combined_vec3 &lt;- numeric_vec * rep_vec</code> in the console, and look at the result. What is the reasoning behind the values produced?","text":""},{"location":"practicals/pt-0/#matrices","title":"Matrices","text":"<p>Another major type of object in R is the matrix. A matrix is simply a rectangular grid of values. One of the simplest ways of producing a matrix is by combining several vectors through the functions <code>rbind()</code> and <code>cbind()</code>. Try <code>rbind(numeric_vec, seq_vec2)</code>.</p>"},{"location":"practicals/pt-0/#q11-what-happens-when-you-evaluate-rbindnumeric_vec-seq_vec2-what-happens-when-you-evaluate-cbindnumeric_vec-seq_vec2-why","title":"Q11. What happens when you evaluate <code>rbind(numeric_vec, seq_vec2)</code>? What happens when you evaluate <code>cbind(numeric_vec, seq_vec2)</code>? Why?","text":""},{"location":"practicals/pt-0/#q12-when-you-evaluate-rbindnumeric_vec-seq_vec2-you-get-a-warning-message-why","title":"Q12. When you evaluate <code>rbind(numeric_vec, seq_vec2)</code> you get a warning message. Why?","text":""},{"location":"practicals/pt-0/#q13-what-happens-when-you-evaluate-rbindnumeric_vec-rep_vec-why","title":"Q13. What happens when you evaluate <code>rbind(numeric_vec, rep_vec)</code>? Why?","text":"<p>You can also create matrices directly in a number of different ways:</p> <pre><code>matrix1 &lt;- matrix(data = seq_len(length.out = 24), nrow = 6, ncol = 4)\nmatrix2 &lt;- matrix(data = seq_len(length.out = 24), nrow = 6, ncol = 4, byrow = TRUE)\nmatrix3 &lt;- diag(x = 5, nrow = 3, ncol = 2)\nmatrix5 &lt;- matrix(data = \"Hello World\", nrow = 2, ncol = 5)\n</code></pre> <p>As with vectors, you can get to the elements of a matrix using square brackets, but with a two-dimensional index, one for rows and another one for columns! For example:</p> <ul> <li><code>matrix1[4, 3]</code></li> <li><code>matrix1[seq_len(length.out = 2), seq_len(length.out = 2)]</code></li> <li><code>matrix1[seq_len(length.out = 2), ]</code></li> </ul>"},{"location":"practicals/pt-0/#q14-how-do-you-retrieve-the-2nd-column-of-matrix2","title":"Q14. How do you retrieve the 2nd column of <code>matrix2</code>?","text":"<p>You can perform simple calculations on matrices, in which case the calculation applies to each element separately:</p> <p><pre><code>(matrix3 + 2) * 2\n</code></pre> You can also combine the values in several matrices, as long as the dimensions of the matrices are compatible</p> <pre><code>(matrix1 * 100) + matrix2\n</code></pre> <p>Finally, you can create logical expressions that apply to an entire matrix. For example, try evaluating:</p> <pre><code>(matrix1 &gt; 10)\n</code></pre> <p>There are a number of useful functions that can be applied to matrices. Have a look at each of the following functions, and try to make sense of the output:</p> <ul> <li><code>length()</code></li> <li><code>dim()</code></li> <li><code>t()</code></li> <li><code>colSums()</code></li> <li><code>summary()</code></li> </ul> <p>Keep in mind that if you ever need help in understanding a function, just bring up the help file for that function.</p>"},{"location":"practicals/pt-0/#q15-the-variable-matrix1-describes-a-matrix-produced-by-the-following-code","title":"Q15. The variable <code>matrix1</code> describes a matrix produced by the following code:","text":"<pre><code>matrix1 &lt;- matrix(data = seq_len(length.out = 50), nrow = 10, ncol = 5)\n</code></pre> <p>What number would we expect to see when we evaluate <code>matrix1[1, 2]</code>? Try to answer this without evaluating the code! Why not a different number?</p>"},{"location":"practicals/pt-0/#q16-which-of-these-commands-would-output-the-2nd-and-4th-columns-of-matrix1-only-again-try-answering-this-without-evaluating-the-code","title":"Q16. Which of these commands would output the 2nd and 4th columns of matrix1 only (again, try answering this without evaluating the code!)?","text":"<p><pre><code>matrix1[2, 4]\nmatrix1(, (2, 4))\nmatrix1[c(2, 4), ]\nmatrix1[, c(2, 4)]\n</code></pre> ** Note that in most situations, we try to avoid using this type of column indication. This is because it is easy to make a mistake with the numbers. Instead, it is easier and less risky to use column names **</p>"},{"location":"practicals/pt-0/#q17-write-your-own-script-for-creating-a-matrix-from-three-separate-vectors-the-first-vector-vec1-should-be-50-elements-long-and-should-simply-contain-the-numbers-1-to-50-the-second-vector-vec2-should-contain-the-square-of-these-numbers-ie-vec1-raised-to-the-power-2-the-third-vector-vec3-should-contain-the-cube-of-these-numbers-ie-vec1-raised-to-the-power-3-finally-create-a-matrix-my_matrix-which-has-vec1-as-the-first-row-vec2-as-the-second-row-and-vec3-as-the-third-row","title":"Q17. Write your own script for creating a matrix from three separate vectors. The first vector, <code>vec1</code>, should be 50 elements long, and should simply contain the numbers 1 to 50. The second vector, <code>vec2</code>, should contain the square of these numbers (i.e. <code>vec1</code> raised to the power 2). The third vector, <code>vec3</code>, should contain the cube of these numbers (i.e. <code>vec1</code> raised to the power 3). Finally, create a matrix, <code>my_matrix</code>, which has <code>vec1</code> as the first row, <code>vec2</code> as the second row, and <code>vec3</code> as the third row.","text":""},{"location":"practicals/pt-0/#data-frame","title":"Data frame","text":"<p>A very common type of object is the data frame. On the face of it, these look very similar to matrices. However, there are some important differences between data frames and matrices. The most important difference is that, in a matrix, all the elements need to be of the same class, while in a data frame, different classes are allowed. Several data frames are  loaded into R by default (e.g., <code>Puromycin</code>). Check the help to understand what this data includes: <code>?Puromycin</code>.</p> <p>R allows you to get to specific columns using their name and the dollar sign: <code>Puromycin$rate</code>.  (it is also possible to use indices like in matrices, for example<code>Puromycin[1, 1]</code> or <code>Puromycin[, 2]</code>. But using indices is risky and should thus be avoided).</p> <p>Note that, although the data frame is of class data frame, typing <code>Puromycin$rate</code> will return a vector of class numeric (try using the function <code>class()</code> to check this).</p> <p>Normally, when R encounters columns with words in a data frame (rather than numbers), it automatically interprets them as data of a different type, the factor (this is true for R version 3, R version 4 interprets columns with words as data type character). This allows us to work with categorical data, by organising the data into discrete categories, known as levels (e.g., red, yellow and blue could be the levels of a column called \u2018colour\u2019). Type the following for an example:</p> <pre><code>Puromycin$rate\nclass(Puromycin$rate)\nclass(Puromycin$state)\nlevels(Puromycin$state)\nas.character(Puromycin$state)\n</code></pre>"},{"location":"practicals/pt-0/#lists","title":"Lists","text":"<p>The last data type that is commonly seen in R is the list. A list is a bit like a complicated vector, where the elements can be objects of any type. For example, we can make a list of vectors:</p> <pre><code>my_list &lt;- list(a = c(1, 2, 3), b = c(5, 6, 7, 8, 9, 10), d = c('G', 'H'))\n</code></pre> <p>Again, we can access elements from the list using their index, with brackets <code>my_list[[1]]</code>, but you should NOT do this!. Instead, use the names whenever possible, either using the bracket notation (<code>my_list[['a']]</code>) or the dollar sign (<code>my_list$a</code>). Lists can get very complex, since there is no limits on the data type of the elements. Therefore, you can get lists of vectors, lists of lists, lists of vectors and lists, etc\u2026</p> <p>There are other types of data in R, with many being specific to particular libraries.</p>"},{"location":"practicals/pt-0/#subsetting-a-data-frame","title":"Subsetting a data frame","text":"<p>We have already come across one way of subsetting through the use of square brackets. By typing, for example,</p> <p><pre><code>Puromycin\nPuromycin[c(1, 2, 3), ]  # this is acceptable\nPuromycin[, 2]           # never do this: use the column's name instead\n</code></pre> we can isolate certain rows of the data frame that we are interested in. Using numbers to access specific rows is ok, but we should never do this with columns. Instead, we can use <code>subset</code> (see below) or the dollar sign <code>$</code> to get a specific column:</p> <pre><code>Puromycin$rate\n</code></pre> <p>We can isolate data easily by using the logical statements mentioned above. For example, we can check which rows have a rate that is less than 100:</p> <pre><code># returns TRUE or FALSE\nPuromycin$rate &lt; 100\n# returns which elements are TRUE\nwhich(Puromycin$rate &lt; 100)\n</code></pre> <p>We can use the subset function to select the rows for which the statement is TRUE:</p> <pre><code># returns all the columns, but only the rows for which\n# Puromycin$rate &lt; 100 is TRUE\npuromycin_sub &lt;- subset(Puromycin, rate &lt; 100)\n</code></pre> <p>We could subset by the \"state\" column:</p> <pre><code>puromycin_treated &lt;- subset(Puromycin, subset = state == \"treated\")\n</code></pre> <p>This will return all fields for which the state is equal to \"treated\". Notice that the factor must be written in quotation marks here, as R needs to know that it is looking for a particular set of characters, rather than a variable.</p>"},{"location":"practicals/pt-0/#q18-how-would-you-subset-the-variable-puromycin-to-return-only-those-fields-for-which-the-concentration-is-greater-than-01","title":"Q18. How would you subset the variable <code>Puromycin</code> to return only those fields for which the concentration is greater than 0.1?","text":""},{"location":"practicals/pt-0/#q19-what-is-the-average-mean-concentration-for-these-cells","title":"Q19. What is the average (mean) concentration for these cells?","text":""},{"location":"practicals/pt-0/#q20-how-would-you-subset-the-variable-puromycin-to-return-only-the-fields-for-which-the-cells-were-not-treated","title":"Q20. How would you subset the variable <code>Puromycin</code> to return only the fields for which the cells were not treated?","text":""},{"location":"practicals/pt-0/#q21-how-would-you-subset-the-variable-puromycin-to-return-only-the-fields-for-which-the-concentration-is-less-than-05-and-the-rate-is-greater-than-100-remember-the-and-command-from-logical-expressions","title":"Q21. How would you subset the variable <code>Puromycin</code> to return only the fields for which the concentration is less than 0.5 and the rate is greater than 100 (remember the \"and\" command from logical expressions)?","text":""},{"location":"practicals/pt-0/#q22-how-would-you-subset-the-variable-puromycin-to-return-only-the-fields-for-which-the-concentration-is-greater-than-02-and-the-cells-have-been-treated","title":"Q22. How would you subset the variable <code>Puromycin</code> to return only the fields for which the concentration is greater than 0.2 and the cells have been treated?","text":""},{"location":"practicals/pt-0/#q23-how-would-you-subset-the-variable-puromycin-to-return-only-the-fields-for-which-the-concentration-is-less-than-01-or-greater-than-02","title":"Q23. How would you subset the variable <code>Puromycin</code> to return only the fields for which the concentration is less than 0.1 or greater than 0.2?","text":""},{"location":"practicals/pt-0/#q24-how-would-you-subset-the-variable-puromycin-to-return-only-the-fields-for-which-the-concentration-is-less-than-02-and-the-rate-is-less-than-70-and-the-cells-have-been-treated","title":"Q24. How would you subset the variable <code>Puromycin</code> to return only the fields for which the concentration is less than 0.2 and the rate is less than 70 and the cells have been treated?","text":""},{"location":"practicals/pt-0/#good-coding-practice","title":"Good coding practice","text":"<p>Keep your code clean and tidy by making use of comments and white space and respecting the style guide.  Comments start with the character # (R simply does not interpret anything written between a comment sign and the end of the line. They  allow you to annotate your code, i.e. to write helpful notes in between all the raw program code. Notice also that white space such as empty lines, spaces and indentations (obtained by pressing the Tab key) are invisible to R. Making good use of white space helps keep your code readable, and so does using clear and descriptive variable names.</p> <p>The following two examples make this point clear. Both programs do exactly the same thing, but one will make sense one year from now, and the other will not!</p>"},{"location":"practicals/pt-0/#example-1","title":"Example 1","text":"<pre><code>boooom &lt;-0.01\nblah2          =0.005\n    blah3&lt;- 0.0036\nbigblah                           = boooom+ blah2        + blah3\ntadayeahmanfunky&lt;-100*exp(bigblah*10)\ntadayeahmanfunky\n</code></pre>"},{"location":"practicals/pt-0/#example-2","title":"Example 2","text":"<pre><code>#--------------------------------\n# Program:     population_size.R\n# Author:      Bob Verity\n# Date:        2021-10-01\n# Purpose:\n# Works out the size of a population under a simple model of exponential growth.\n# The growth rate is assumed to be equal to the sum of the nutrient content (% sugars),\n# the temperature (centigrade above 20), and the humidity (%).\n# Other parameters include the starting population size (number of individuals)\n# and the time allowed to grow (hours).\n#--------------------------------\n\n# Define input parameters\nnutrients     &lt;- 0.01\ntemperature   &lt;- 0.005\nhumidity      &lt;- 0.0036\nstarting_size &lt;- 100\ngrow_time     &lt;- 10\n\n# Calculate total growth rate\ngrowth_rate &lt;- nutrients + temperature + humidity\n\n# Calculate population size at the end of the time period\nend_size &lt;- starting_size * exp(growth_rate * grow_time)\n\n# Return end population size in the console\nend_size\n#--------------------------------\n</code></pre>"},{"location":"practicals/pt-0/#q25-write-your-own-well-annotated-and-fully-functional-script-for-calculating-the-volume-of-a-rectangular-room-with-the-following-dimensions","title":"Q25. Write  your own well annotated and fully functional script for calculating the volume of a rectangular room with the following dimensions:","text":"<ul> <li>length: 5m</li> <li>width: 4m</li> <li>height: 3m</li> </ul> <p>The layout and design of the program are much more important than the calculations here!</p>"},{"location":"practicals/pt-1/","title":"Introduction to Regular Expressions in R","text":""},{"location":"practicals/pt-1/#regular-expressions","title":"Regular Expressions","text":"<p>Regular expressions are used to search for a specific pattern in a string. To understand them, we will take an example in which the actual names in our data file are incorrect, or inconsistent. Run the following line of code to import the a table into a data frame:</p> <pre><code>reptiles &lt;- read.table(file = \"http://wurmlab.com/teaching/programming_in_r/reptiles.txt\")\n</code></pre> <p>This data frame details the genus and species names of 16 endangered reptiles, along with the dates at which they were listed as endangered. You can load just the names into a separate variable by running the code</p> <pre><code>names_ids &lt;- row.names(reptiles)\n</code></pre> <p>Have a close look at these names. Notice that each reptile has a unique identification number next to its name (don't look these numbers up - they don't mean anything)! Also, we can see that some names were recorded incorrectly - the genus names for the Liopholis group are in lowercase, while we all know that genus names should be capitalized! All in all, this data appears quite \"messy\" and needs cleaning up.</p> <p>Regular expressions are ideal for fixing this. \"Regex\" are at the center of a suite of tools that allow us to search for, locate, and replace characters or words within a data set. The really powerful thing about regular expressions is that we can do a \"fuzzy\" search, meaning the pattern we are searching for has some flexibility built into it.</p>"},{"location":"practicals/pt-1/#basic-find-and-replace","title":"Basic find and replace","text":"<p>First of all we will search through the vector <code>names_ids</code> to find a list of the elements that contain the word \"liopholis\". The function that allows us to do this is <code>grep()</code>, which has two main arguments; <code>pattern</code> and <code>x</code>. The pattern is the actual word, or part of a word, that we are looking for. The argument `x`` describes the variable that we are searching through. In our case we want to evaluate the following code:</p> <pre><code># Search through names_ids for the word \"liopholis\", and output_positions\ngrep(pattern = \"liopholis\", x = names_ids)\n</code></pre> <p>The output of this code is a list of numbers. Each of these numbers describes the position of an element in the vector <code>names_ids</code> that matches the pattern - in this case the 12th and 13th elements. Make sure you fully understand where these numbers came from!</p> <p>Sometimes it may be more useful to obtain the actual names within which the pattern was found, rather than a list of positions. We can do this by making use of the additional argument <code>value = TRUE</code> (see the help file for the <code>grep()</code> function for a complete list of possible arguments). The new code reads:</p> <pre><code># Search through names_ids for the word \"liopholis\", and output_names\ngrep(pattern = \"liopholis\", x = names_ids, value = TRUE)\n</code></pre> <p>Now we find that the output contains the actual elements of the vector that match the pattern, rather than just a list of positions. These names correspond exactly with the positions found in the previous example.</p> <p>Finally, we may want to find and replace the pattern. This can be done using the function <code>gsub()</code>. The function <code>gsub()</code> takes arguments <code>pattern</code> and <code>x</code>, just like the function <code>grep()</code>, but it also has an additional argument <code>replacement</code>. The argument <code>replacement</code> describes the new word, or words, that we want to insert in place of pattern. For example, in the <code>reptiles</code> the word \"liopholis\" is a genus name, and so should be capitalized. Thus, we want to replace the word \"liopholis\" with \"Liopholis\", as follows:</p> <pre><code># Search through names_ids for the word \"liopholis\" and replace with the word \"Liopholis\".\nnames_ids_fixed &lt;- gsub(pattern = \"liopholis\", replacement = \"Liopholis\", x = names_ids)\n</code></pre> <p>The output of this function is a new vector in which the desired replacement has been carried out. Notice that the code above stores this new vector in the variable <code>names_ids_fixed</code>.</p> <p>Experiment with <code>grep()</code> and <code>gsub()</code> until you are confident at using them. Then answer the following questions:</p>"},{"location":"practicals/pt-1/#q1-how-could-you-use-regular-expressions-to-find-the-only-element-in-the-vector-names_ids_fixed-that-contains-a-lowercase-q-what-is-the-position-of-this-element-in-the-vector","title":"Q1. How could you use regular expressions to find the only element in the vector <code>names_ids_fixed</code> that contains a lowercase \"q\"? What is the position of this element in the vector?","text":""},{"location":"practicals/pt-1/#q2-you-want-to-import-the-names_ids_fixed-data-into-excel-but-are-having-problems-due-to-the-spaces-between-the-words-a-common-problem-how-could-you-use-gsub-to-replace-each-space-with-an-underscore-_-_","title":"Q2. You want to import the <code>names_ids_fixed</code> data into excel, but are having problems due to the spaces between the words (a common problem). How could you use <code>gsub()</code> to replace each space with an underscore <code>_</code> <code>_</code>?","text":""},{"location":"practicals/pt-1/#using-fuzzy-searching","title":"Using \"fuzzy\" searching","text":"<p>One of the most powerful features of regular expressions is the ability to perform \"fuzzy\" searching. Simply put, by using special characters we can introduce some flexibility into the pattern that we are searching for.</p> <p>A slightly reduced list of special characters and their meanings is given below.</p> Special Character Meaning . Any character ? The preceding item is optional and will be matched at most once. * The preceding item will be matched zero or more times. + The preceding item will be matched one or more times. <p>Additional special characters can be found:</p> <ul> <li>by Googling (e.g. \"Regexp cheat sheet for R\")</li> <li>by typing: ?regex in R</li> </ul> <p>These special characters can be used on their own, or in combination with one another. To help you out with understanding these symbols, here are a few examples:</p> <ul> <li>The pattern <code>.r</code> means any character, followed by the letter \"r\" (e.g. \"er\", \"or\", \"tr\", \"3r\").</li> <li>The pattern <code>...r</code> means any character, followed by any character, followed by any character, followed by the letter \"r\" (e.g. \"beer\", \"deer\", \"zekr\").</li> <li>The pattern <code>l*at</code> means zero or more copies of the letter \"l\", followed by the letters \"at\" (e.g. \"at\", \"lat\", \"llllllllllat\").</li> <li>The pattern <code>s.+s</code> means the letter \"s\", followed by one or more copies of any character, followed by the letter \"s\" (e.g. \"sas\", \"sts\", \"sauces\", \"serendipities\", but NOT \"ss\").</li> <li>The pattern <code>.* .*</code> means zero or more copies of any character, followed by a space, followed by zero or more copies of any character (any combination of two words, e.g. \"test word\").</li> </ul> <p>Some of these examples might seem very confusing at first, but if you learn what each special character means on its own and then go through the pattern one at a time you should find that it makes sense.</p> <p>As an example of how fuzzy searching can be useful, we will now use these special characters to remove the ID tags from the reptile names. Notice that the ID numbers are of different lengths, but they are always separated with a colon from the part that we are interested in. Therefore, we can remove these characters by searching for zero or more copies of any character, followed by a colon, and replacing this pattern with an empty string. The single line of code that achieves this is as follows:</p> <p><pre><code>names &lt;- gsub(pattern = \".*:\", replacement = \"\", x = names_ids_fixed)\n</code></pre> Have a look inside the variable <code>names</code>. We have successfully isolated the genus and species names away from the pesky ID tags, even though the exact format of the tags may vary between different entries. Tricks like this can save us a great deal of time - especially when our data set is thousands of lines long. In fact, we have only skimmed the surface of what regular expressions can do - I encourage anyone who is interested to take a deeper look.</p>"},{"location":"practicals/pt-1/#q3-what-does-the-pattern-x-mean-in-a-regular-expression","title":"Q3. What does the pattern \"..x..\" mean in a regular expression?","text":""},{"location":"practicals/pt-1/#q4-what-does-the-pattern-e-mean-in-a-regular-expression","title":"Q4. What does the pattern \"e+\" mean in a regular expression?","text":""},{"location":"practicals/pt-1/#q5a-how-many-reptile-names-in-names-contain-a-lowercase-o-or-an-uppercase-e","title":"Q5a. How many reptile names in <code>names</code> contain a lowercase \"o\" or an uppercase \"E\"?","text":"<p>Hint - you should be able to identify the words containing these patterns using a single <code>grep</code> command. We have learnt how to search for a choice of two or more characters in class.</p>"},{"location":"practicals/pt-1/#q5b-how-many-reptile-names-in-names-contain-us-or-li","title":"Q5b. How many reptile names in <code>names</code> contain \"us\" or \"li\"?","text":"<p>Hint - As before, use a single <code>grep</code> command to identify the words with these patterns.</p>"},{"location":"practicals/pt-1/#q6-add-three-additional-columns-to-the-reptiles-table","title":"Q6. Add three additional columns to the <code>reptiles</code> table:","text":"<ul> <li>one containing only the identifier numbers (e.g. 1423 without the \u201cID\u201d)</li> <li>one column containing only the genus (e.g. \"Bellatorias\")</li> <li>one containing only the species (excluding the genus name and the subspecies name, e.g. we want to read \"tympanum\")</li> </ul> <p>Hint - try to decompose this task, the solution is not a \u201cone-liner\u201d. Make use of the functions you have just learnt and focus on extracting the numbers, genus, and species, rather than the \u201cadd new columns\u201d bit.</p>"},{"location":"practicals/pt-1/#extra-section","title":"Extra section!","text":""},{"location":"practicals/pt-1/#data-input-from-files","title":"Data input from files","text":"<p>Open source data plays an increasingly important role recently, so it is vital to know how to input the data with various formats into your program. Choosing the right way of importing data will save you time and boost your efficiency when cleaning the data. To test your abilities, download  longevity_genes/longevity.csv and TableS2.xls and try loading them into R.</p> <pre><code>longevity_genes_data  &lt;- read.csv(\"input location/longevity.csv\")\nlongevity_genes_data  &lt;- read.csv(file.choose())                    # to choose the file\n# try to figure out how to import Excel spreadsheets into R,\n# which is an excessively discussed topic online.\n# One way of doing it, is saving your Excel spreadsheet (TableS2.xls)\n# as a tab delimited text file and loading it into R\nread.delim(\"input location/file name.txt\")\n</code></pre>"},{"location":"practicals/pt-1/#data-output-into-various-formats","title":"Data output into various formats","text":"<p>Most of the time, as either a data recorder or a data analyst, knowing the best way to output data is important. Outputting data as a CSV file is recommended as it's compatible with both Excel and R.</p> <pre><code># write a new subsetted data frame (create this using your previous skills) into a CSV file\nwrite.csv(your_subsetted_data_frame, file = \"output_location/file_name.csv\")\n# create three variables, a, b, and c of any class and save them into a .RData file (What is this? When could it be useful?)\nsave(a, b, c, file = \"output_location/file_name.RData\")\n</code></pre>"},{"location":"practicals/pt-1/#hacker-q7-download-this-text-file-and-figure-out-how-to-capture-the-first-letter-of-the-genus-and-transform-it-to-make-it-uppercase-do-this-in-a-generic-manner-that-would-work-on-a-table-of-thousands-of-species","title":"Hacker Q7.  Download this text file and figure out how to \u201ccapture\u201d the first letter of the genus, and transform it to make it uppercase. Do this in a generic manner (that would work on a table of thousands of species).","text":"<p>Hint - look into the help page of \u201cgsub\u201d, especially the explanation for the \u201creplacement\u201d parameter, as well as the examples at the bottom of the help page.</p>"},{"location":"practicals/pt-2/","title":"Introduction to functions and loops in R","text":"<p>Building on your existing skills, we will now move on to consider advanced ways of controlling program flow. Specifically, we will explore functions and loops, two important features of R that are also present in most other programming languages. We will also be doing a few exercises with DNA/RNA strings. As always, you will want to refer frequently to the R help files (through <code>?</code>) and your own notes when exploring these new concepts.</p>"},{"location":"practicals/pt-2/#functions","title":"Functions","text":"<p>Functions are pieces of code that take input information (in the form of \"arguments\"), do something with it, and give back an output. They allow you to run an analysis multiple times without having to rewrite it from scratch every time you need to run it. A function looks like this:</p> <pre><code>function_name &lt;- function(input) {\n\n  ### the \"body\" of the function\n\n  # code that performs some calculation on the input\n  # possibly other lines of code that perform calculations\n\n  # returning an output vector:\n  return(output)\n}\n</code></pre> <p>You can choose whatever name you want instead of <code>function_name</code> (try a meaningful name). After the <code>&lt;-</code>, the word <code>function</code> within brackets lets R know that you are writing a new function. Here, <code>input</code> is the name of the only argument that the calculations in the <code>body</code> of the function are based on (your function can have multiple arguments). Between the curly brackets <code>{}</code> is the main code of your function, where the calculation(s) happen. Almost everything that occurs between the curly brackets stays within the curly brackets. The only thing that comes outside the curly brackets is what you put into the <code>return()</code> on the last line. If you have no <code>return()</code>, your function may compute something but nobody will ever know about it! Note that the <code>return</code> command can only handle a single argument.</p> <p>To take a self-explanatory example:</p> <pre><code>x &lt;- c(2, 3, 4, 5)\nmean(x)\n</code></pre> <p>You just used the <code>mean</code> function, one of many functions that our predecessors built into R. The point of this function is that you can calculate the mean of any vector without explicitly writing the formula for the mean each time. The interesting thing about R is that it is possible to create your own functions. This is how R functions work:</p> <pre><code>## Define function named 'my_own_mean'\n\nmy_own_mean &lt;- function(numbers) {\n  ## Calculate mean\n  # Sum all numbers in the vector\n  sum_of_values &lt;- sum(numbers)\n\n  # Obtain the number of values in the vector\n  number_of_values &lt;- length(numbers)\n\n  # Get the mean\n  mean_value &lt;- sum_of_values/number_of_values\n\n  ## Output the mean\n  return(mean_value)\n}\n\n## Now run the function with some data:\nmy_own_mean(numbers = c(10, 20, 30, 40))\n\nmy_own_mean(numbers = seq(from = 1, to = 50))\n</code></pre> <p>We created a function that computes the sum and number of all values in a given vector (<code>numbers</code>) and then divides them to obtain the mean. We split the calculation in three steps, just to show that you can have many lines of code in the body of a function. The only input this function receives is a vector of numbers (<code>numbers</code>) and all the calculations are based on this. In the end we return the result of the third calculation (<code>mean_value</code>). Does <code>number_of_values</code> exist in the normal R console? No! Because this variable was only created within the curly brackets. Remember? What happens between the curly brackets stays in the curly brackets.</p> <p>Nothing much happens after loading the function <code>my_own_mean</code> into R (you always have to evaluate the entire code of the function from <code>function_name</code> to the closing curly brackets <code>}</code> if you made changes to the code). The magic happens when you call the function. We did this by typing <code>my_own_mean(numbers = 1:50)</code> (of course you can use other vectors instead as well). The vector with numbers from 1 to 50 will be used as <code>numbers</code> in the function.</p> <p>Now take a look at the following lines of code. This code is designed to take a number in seconds and convert it into hours, minutes, and remaining seconds (<code>floor()</code> is R's built-in function for rounding down to the closest whole number):</p> <pre><code># Input raw number of seconds\nnumber_of_seconds &lt;- 19955\n\n# Convert number_of_seconds into hours, minutes, and seconds\nhours   &lt;- floor(number_of_seconds / (60 * 60))\nminutes &lt;- floor((number_of_seconds - hours * (60 * 60)) / 60)\nseconds &lt;- number_of_seconds - ((hours * 60) + minutes) * 60\n\n# Create a single vector containing all three quantities\noutputs &lt;- c(hours, minutes, seconds)\n\n# Output the solution to the console\noutputs\n</code></pre>"},{"location":"practicals/pt-2/#q1-modify-the-code-above-to-make-it-into-a-function-called-time_converter-this-function-should-take-a-single-number-as-an-argument-the-number-of-seconds-we-want-to-convert-this-function-should-also-include-the-three-lines-of-code-that-convert-number_of_seconds-into-hours-minutes-and-seconds-the-line-of-code-that-merges-these-three-variables-into-one-vector-and-a-line-returning-this-vector-as-the-output-of-the-function-once-you-created-the-function-and-loaded-it-into-r-use-relevant-examples-for-testing-0-3600-another-remember-to-indent-any-code-inside-the-curly-brackets","title":"Q1. Modify the code above to make it into a function called <code>time_converter</code>. This function should take a single number as an argument (the number of seconds we want to convert). This function should also include the three lines of code that convert <code>number_of_seconds</code> into <code>hours</code>, <code>minutes</code>, and <code>seconds</code>, the line of code that merges these three variables into one vector, and a line returning this vector as the output of the function. Once you created the function and loaded it into R, use relevant examples for testing (0, 3600, another). Remember to indent any code inside the curly brackets.","text":""},{"location":"practicals/pt-2/#q2-write-your-own-function-for-converting-distances-between-different-units-your-function-should-take-the-distance-in-kilometres-as-input-and-return-the-distance-in-miles-as-output-1-kilometre-is-06213712-miles-note-floor-wont-be-needed-in-the-calculations-here-remember-to-clearly-commentannotate-your-code-and-make-appropriate-use-of-whitespace-including-indentation-and-newlines","title":"Q2. Write your own function for converting distances between different units. Your function should take the distance in kilometres as input and return the distance in miles as output (1 kilometre is 0.6213712 miles). Note: <code>floor</code> won't be needed in the calculations here. Remember to clearly comment/annotate your code and make appropriate use of whitespace including indentation and newlines.","text":""},{"location":"practicals/pt-2/#more-complex-functions","title":"More complex functions","text":"<p>Functions can be very useful when you have to do the same calculation many times. We will now consider a hypothetical experiment in which we are measuring the flight speed of bees through flight tunnels.</p> <p>We would like to measure the flight speed of the bees in meters per second. Annoyingly, the timer we used gave readings with the format <code>hours:minutes:seconds</code>, rather than just the total number of seconds.</p> <p>Fortunately, functions in R can take more than one argument:</p> <pre><code>my_function &lt;- function(input1, input2, ...) {\n    # code including input1, input2, ...\n    return(something)\n}\n</code></pre>"},{"location":"practicals/pt-2/#q3-make-a-function-that-takes-hours-minutes-and-seconds-as-inputs-and-outputs-the-total-number-of-seconds-make-sure-it-has-three-arguments-and-a-descriptive-name-test-the-function-with-a-range-of-times-for-which-you-know-the-answer","title":"Q3. Make a function that takes <code>hours</code>, <code>minutes</code> and <code>seconds</code> as inputs, and outputs the total number of seconds. Make sure it has three arguments and a descriptive name. Test the function with a range of times for which you know the answer.","text":"<p>In our experiment, most bees flew through the test tunnel in under an hour. It is time consuming to include the argument <code>hours = 0</code> every time that we call the function.</p> <p>A neat thing about functions is that we can set default values for any argument, using the syntax:</p> <pre><code>my_function &lt;- function(input1, ..., input15 = default) {\n  # code including input1, input2, ..., input15\n  return(something)\n}\n</code></pre> <p>The default argument(s) is generally placed at the end of the argument list.</p>"},{"location":"practicals/pt-2/#q4-make-the-hours-and-minutes-arguments-be-defined-as-0-by-default-in-your-function-run-the-function-without-supplying-these-two-arguments-then-run-it-again-with-using-a-range-of-hours-and-minutes","title":"Q4. Make the <code>hours</code> and <code>minutes</code> arguments be defined as 0 by default in your function. Run the function without supplying these two arguments, then run it again with using a range of <code>hours</code> and <code>minutes</code>.","text":"<p>Finally, we would like to create a function to measure the flight speed of the bees in meters per second. This function should:</p> <ul> <li>Take the tunnel length (in meters), hours, minutes and seconds as arguments</li> <li>Use your previous function to convert hours, minutes and seconds to seconds</li> <li>Calculate the speed of the bees in meters per second</li> <li>Return the speed of the bees</li> </ul>"},{"location":"practicals/pt-2/#q5a-create-this-function-test-it-with-a-control-values-for-which-you-know-the-answer","title":"Q5A. Create this function. Test it with a control (values for which you know the answer).","text":""},{"location":"practicals/pt-2/#q5b-use-the-function-to-measure-the-speed-of-the-bees-with-the-following-measurements","title":"Q5B. Use the function to measure the speed of the bees with the following measurements:","text":"Distance (m) Time (hours:minutes:seconds) 1 00:00:08 10 00:00:40 300 00:05:00 800 01:06:40"},{"location":"practicals/pt-2/#q5c-can-you-think-of-parameter-values-that-would-make-your-function-not-work-properly-what-happens-if-you-try-running-the-function-with-these-values","title":"Q5C. Can you think of parameter values that would make your function not work properly? What happens if you try running the function with these values?","text":""},{"location":"practicals/pt-2/#functions-with-other-types-of-input","title":"Functions with other types of input","text":"<p>Note that functions do not have to take single numbers as input. They can take vectors, matrices, data frames, or any other type of object, and they can also take character and logical data as well as numerical. For example, the <code>mean</code> function we used earlier took the vector <code>x &lt;- c(2, 3, 4, 5)</code> as input, which is a single vector with four numbers.</p>"},{"location":"practicals/pt-2/#q6-write-a-function-that-takes-a-vector-of-words-as-input-and-outputs-the-number-of-characters-in-the-longest-word-hint-you-are-going-to-need-to-find-out-how-r-counts-the-number-of-characters-in-words-and-how-it-finds-the-maximum-value-in-a-vector-use-an-internet-search-engine","title":"Q6. Write a function that takes a vector of words as input and outputs the number of characters in the longest word. Hint: you are going to need to find out how R counts the number of characters in words and how it finds the maximum value in a vector - use an internet search engine!","text":""},{"location":"practicals/pt-2/#loops","title":"Loops","text":"<p>Imagine that you need to run the function <code>time_converter</code> on different numbers. You could type <code>time_converter</code> many different times, each time with a different number. But now imagine you had to type that thousands of times. Not fun.</p> <p>Fortunately, computers were built to perform same tasks over and over again many times. They do this using a construct called a loop. Although there are several types of loops, we are going to learn about the 'for loop'. It works this way:</p> <pre><code>## For loop example\nfor (seconds in c(1000, 2000, 3000)) {\n  time_in_hours &lt;- time_converter(number_of_seconds = seconds)\n  print(time_in_hours)\n}\n</code></pre> <p>The variable <code>seconds</code> only exists within the loop. The loop will run 3 times. The first time, <code>seconds</code> will take the first value from the vector <code>(1000, 2000, 3000)</code>, i.e., <code>1000</code>. R will run through the loop, computing <code>time_in_hours</code> and printing it. When R starts running through the loop the second time, <code>seconds</code> will have the value <code>2000</code>, and the previously calculated <code>time_in_hours</code> will have been forgotten.  R will run through the loop, computing <code>time_in_hours</code> and printing it. The third time, same thing again, but <code>seconds</code> will start with the value <code>3000</code>.</p>"},{"location":"practicals/pt-2/#slightly-more-complex-loops","title":"Slightly more complex loops","text":"<p>There are some interesting ways in which we can stretch our understanding of loops. First of all, it is important to recognise that the values that we are iterating over can be anything that goes in a vector. The vector can be defined outside the loop definition line:</p> <pre><code>## Character based loop values\ngreetings &lt;- c(\"Hey\", \"Hi\", \"Hello\", \"Aloha\", \"Howdy\",\n               \"Yooooo!\", \"Wassup\", \"What's shakin?\",\n               \"yello!\", \"Greetings\",  \"Dude, wake up!\")\nfor (word in greetings) {\n  print(paste(word, \" - said the giggling frog\", sep = \" \"))\n}\n\n## Sequential loop values\nmy_favourite_numbers &lt;- c(42, 3.14, 7, 69, 6.626e-34, 1024, 4, 2.718281828, 666, 1.61803398, 99)\n\n# set the cumulative sum at zero before the loop starts\ncumulative_sum &lt;- 0\n\nfor (value in my_favourite_numbers) {\n  # print the sentence\n  print(paste(value, \"is my favourite number\", sep = \" \"))\n\n  # add favourite numbers, sequentially\n  cumulative_sum &lt;- cumulative_sum + value\n\n  # print the cumulative sum\n  print(paste(\"The sum of my favourite numbers is:\", cumulative_sum, sep = \" \"))\n}\n\n## Looping through the positions of each element of the vector (the index, or position)\nfoods &lt;- c(\"tempeh\", \"beyond\", \"beans\", \"tofu\")\nfor (position in seq_len(length(foods))) {\n  current_food &lt;- foods[position]\n  message(\"At position \", position, \" we have \", current_food)\n}\n</code></pre>"},{"location":"practicals/pt-2/#storing-loop-results","title":"Storing loop results","text":"<p>You will often want to do more than just print the loop results. For example, you may want to keep them in a separate variable. Check the following example. What does <code>phrases</code> look like after the 4th iteration?</p> <pre><code>## Vector to loop through\npractical_attributes &lt;- c(\"great\", \"deeply distressing\", \"very long\", \"amazeballs!\", \"informative\")\n\n## Empty vector to store the loop results in\nphrases &lt;- c()\n\nfor (practical_attribute in practical_attributes) {\n phrase &lt;- paste(\"This practical is\", practical_attribute)\n # Add the loop result to end of the vector of results\n phrases &lt;- append(phrases, phrase)\n}\n</code></pre> <p>A different way of approaching a for loop is to loop through the positions of a vector, rather than the vector itself. In the following code, we also create a vector for the result with the same length as the vector that we are looping through. We then use the position to 'populate' it:</p> <pre><code>## Vector to loop through\npractical_attributes &lt;- c(\"great\", \"deeply distressing\", \"very long\", \"amazeballs!\", \"informative\")\n\n## Vector with empty elements (as long as practical_attributes)\nphrases &lt;- rep(\"\", times = length(practical_attributes))\n\n## Loop through the position rather than the vector\nfor (position in 1:length(practical_attributes)) {\n\n  ## Create phrase, getting attribute from practical_attributes[i]\n  phrase &lt;- paste(\"This practical is\", practical_attributes[position])\n\n  ## Add phrase to the right position of the results vector\n  phrases[position] &lt;- phrase\n}\n</code></pre> <p>It is important to understand these two approaches with loops: looping through items vs. looping through positions. In some contexts it is easier to use the first approach; in other contexts the second is easier. Once you are comfortable with loops, have a go at the following tasks:</p>"},{"location":"practicals/pt-2/#pen-and-paper-q7-consider-the-following-table-which-lists-the-genus-and-species-name-for-a-number-of-ant-species-present-in-great-britain-the-loop-counts-the-number-of-entries-where-the-genus-name-begins-with-given-letters-describe-in-your-own-words-what-the-loop-is-doing-at-each-iteration","title":"Pen and paper Q7. Consider the following table, which lists the genus and species name for a number of ant species present in Great Britain. The loop counts the number of entries where the genus name begins with given letters. Describe in your own words what the loop is doing at each iteration.","text":"<pre><code>letters &lt;- c(\"L\", \"T\", \"A\", \"F\")\n\nfor (letter in letters){\n begins_with &lt;- paste(\"^\", letter, sep = \"\")\n matches &lt;- grep(pattern = begins_with, x = ant_table$genus)\n print(paste(length(matches), \"begin with\", letter))\n}\n</code></pre>"},{"location":"practicals/pt-2/#q8-write-a-loop-that-iterates-over-the-colours-red-green-blue-yellow-orange-purple-pink-and-prints-out-the-position-ie-the-position-of-the-colour-in-the-vector-and-the-colour-itself-this-should-be-done-in-human-readable-format-ie-the-colour-red-is-in-position-1-in-the-vector-the-colour-blue-is-in-position-2-in-the-vector-and-so-on-make-sure-to-indent-the-code-appropriately-between-the-curly-brackets","title":"Q8. Write a loop that iterates over the colours red, green, blue, yellow, orange, purple, pink and prints out the position (i.e. the position of the colour in the vector) and the colour itself. This should be done in human-readable format (i.e. \"the colour red is in position 1 in the vector\", \"the colour blue is in position 2 in the vector\", and so on). Make sure to indent the code appropriately between the curly brackets.","text":""},{"location":"practicals/pt-2/#using-loops","title":"Using loops","text":"<p>For the following exercice, imagine that instead of buying a coffee, you deposit the \u00a32.50 you would have spent into a savings account. The account has an annual interest rate of 5%, which is deposited into the account. You do not take any money out of the account for 20 years.</p>"},{"location":"practicals/pt-2/#q9-use-a-for-loop-to-calculate-how-much-money-there-is-in-the-account-after-20-years","title":"Q9. Use a <code>for</code> loop to calculate how much money there is in the account after 20 years.","text":""},{"location":"practicals/pt-2/#q10-make-a-plot-of-the-amount-of-money-in-the-account-per-year-hint-if-you-have-not-done-so-yet-you-will-have-to-create-a-vector-to-store-each-years-amount","title":"Q10. Make a plot of the amount of money in the account per year. Hint: if you have not done so yet, you will have to create a vector to store each year's amount.","text":"<p>In the following exercise, we will simulate the size of a population given a reproduction rate that changes every year.</p>"},{"location":"practicals/pt-2/#q11-write-a-loop-that-calculates-the-population-size-depending-on-the-reproduction-rate-over-a-period-of-20-years-store-the-population-value-for-each-iteration-of-the-loop-in-a-separate-vector","title":"Q11. Write a loop that calculates the population size depending on the reproduction rate over a period of 20 years. Store the population value for each iteration of the loop in a separate vector.","text":"<ul> <li>Use a starting population size of 1000.</li> <li>Every year,</li> <li>obtain a random reproduction rate (e.g., <code>reproduction_rate &lt;- rnorm(n = 1, mean = 1, sd = 0.4)</code>.</li> <li>Update the population size value accordingly.</li> <li>Print a summary of what happened.</li> <li>Store each year's population in an external vector.</li> <li>Once you have all the population sizes, plot them.</li> </ul>"},{"location":"practicals/pt-2/#nested-loops","title":"Nested Loops","text":"<p>Another important way of extending loops is to consider nested loops - in other words, loops within other loops! Have a look at the following code:</p> <pre><code>coffee &lt;- c(\"latte\", \"cappuccino\", \"flat white\", \"cortado\")\ncafes   &lt;- c(\"Infusion\", \"Ground\", \"Sugar Cube\", \"Foxcroft &amp; Ginger\", \"Sweet\")\n\nfor (drink in coffees) {\n  print(paste(\"I'd like a\", drink, \"... Where can I go?\"))\n  for (the_place in cafes) {\n    print(paste(\"You can go to\", the_place, \"to have a\", drink))\n  }\n}\n</code></pre> <p>Here we have one loop (with position <code>the_place</code>) nested within another loop (with position <code>drink</code>). We have also defined the values that <code>the_place</code> and <code>drink</code> can take. With a pen and paper, determine what is the 1st line printed, and then what is the 10th line printed? Evaluate this code and try to make sense of the output. Fiddle around with the different elements of this code until you are comfortable with nested loops. Warning - loops require your computer to perform many operations, and as such it is quite easy to crash R using loops. A simple block of code evaluated 100,000 times amounts to quite a big job. If you want to force R to exit a loop part way through, simply press 'Esc' (or control-C). Nested loops are particularly hazardous!</p>"},{"location":"practicals/pt-2/#q12-a-create-a-nested-loop-the-outer-loop-should-iterate-over-the-words-angry-lazy-and-happy-the-inner-loop-should-iterate-over-the-words-birds-dogs-and-horses-the-code-inside-the-inner-loop-should-print-out-a-vector-containing-the-values-of-both-loops-for-example-angry-and-birds-in-the-first-instance","title":"Q12-A. Create a nested loop. The outer loop should iterate over the words \"Angry\", \"Lazy\", and \"Happy\". The inner loop should iterate over the words \"birds\", \"dogs\", and \"horses\". The code inside the inner loop should print out a vector containing the values of both loops (for example \"Angry\" and \"birds\" in the first instance).","text":""},{"location":"practicals/pt-2/#q12-b-look-again-at-the-code-you-wrote-in-q12-a-did-you-sufficiently-indent-your-code-like-in-the-example-of-a-nested-loop-above-so-that-it-is-easy-to-see-which-lines-of-code-are-executed-at-which-point-of-the-different-loops-if-not-do-it-now-and-continue-doing-it-for-the-next-questions-as-well","title":"Q12-B. Look again at the code you wrote in Q12-A. Did you sufficiently indent your code (like in the example of a nested loop above), so that it is easy to see which lines of code are executed at which point of the different loops? If not, DO IT NOW! And continue doing it for the next questions as well.","text":""},{"location":"practicals/pt-2/#q13-write-a-third-degree-nested-loop-ie-a-loop-within-a-loop-within-a-loop-be-careful-not-to-loop-over-too-many-values-or-you-will-crash-r","title":"Q13. Write a third-degree nested loop (i.e. a loop within a loop within a loop). Be careful not to loop over too many values or you will crash R!","text":"<p>(if you're short of ideas, you could for example add <code>practical_attributes</code> qualifiers to Q12...)</p>"},{"location":"practicals/pt-2/#using-loops-to-reformat-a-data-set","title":"Using loops to reformat a data set","text":"<p>Loops are particularly useful to reformat data sets. By looping through all of the fields of a particular data set and at each iteration saving the relevant entry into a new data structure, it is possible to convert from one data format into another.</p> <p>The data set that we will use in this example is typical of the sort of data that you might be faced with in the future. Load the data by running the following line of code:</p> <pre><code>helianthus_data &lt;- as.matrix(read.table(\"https://wurmlab.com/SBC361-programming-in-R/public/HelianthusData_num.txt\",\n                                         header = TRUE))\n</code></pre> <p>Each row in this data set represents a different strain of Helianthus annuus (sunflowers), grown under controlled conditions. The first column tells us the Strain (these are numbered from 1 to 5). The remaining columns describe the number of plants found in the study area at six different points in time. For example, looking at the first row, we can see that strain 1 started out with 12 plants in the first time point and ended up with 57 plants in the last time point.</p> <p>We want to get this data into a new format - sometimes called long format - in which we have a matrix of three columns; the first column describes the strain, the second column describes the time point, and the third column describes the number of plants observed. It turns out that researchers often need to do this! For example, plotting using <code>ggplot</code> (and many analysis packages) requires long format. The first few lines of this new data structure should look like this:</p> strain time count 1 0 12 1 1 33 1 2 71 1 3 61 1 4 73 1 5 57 2 0 10 2 1 27 ... ... ... <p>We can make the transition from the wide format of <code>helianthus_data</code> to the long format described above using a nested loop. But first, let us create an empty matrix, which we will eventually fill with our new values.</p>"},{"location":"practicals/pt-2/#q14-a-create-an-empty-matrix-called-long_data-this-matrix-must-have-3-columns-and-30-rows-the-number-30-comes-from-the-fact-that-we-have-five-strains-at-six-time-points-each-name-the-columns-cstrain-time-count","title":"Q14-A. Create an empty matrix, called <code>long_data</code>. This matrix must have 3 columns and 30 rows (the number 30 comes from the fact that we have five strains at six time points each). Name the columns <code>c(\"strain\", \"time\", \"count\")</code>.","text":"<p>With this empty matrix created, we can move on to the next part of the problem - populating it with values. We want to look at each of the elements of helianthus_data one after the other, using a nested loop. The basic structure of this nested loop is as follows:</p> <pre><code># Loop through all rows of helianthus_data\nnrow(helianthus_data)\nfor (my_rows in 1:5) {\n  # Loop through all columns of helianthus_data except the first\n  for (my_col in 2:7) {\n\n    # This is where the main code goes (populating long_data with values).\n\n  }\n}\n</code></pre> <p>Here we are using loops to go through each of the rows of the matrix <code>helianthus_data</code>, and for each row we are going through columns 2 to 7 (as these are the columns that contain relevant data). At any point in the two loops, the value that we are focusing on is given by <code>helianthus_data[my_rows, my_col]</code>.</p> <p>Hopefully you can already see that these are the exact values that we want to drop into the third column of our matrix <code>long_data</code>. However, we are presented with a problem - how do we drop these values one after the other into the right place in the matrix <code>long_data</code>? We cannot use the index <code>my_rows</code> to help us, as this only goes through values 1 to 5. Similarly, we cannot use the index <code>my_col</code>, as this only goes through values 2 to 7. What we really need is a new index that goes all the way from 1 to 30, irrespectively of the row or column that we are focusing on.</p>"},{"location":"practicals/pt-2/#q14-b-change-the-for-loop-above-to-include-a-variable-my_position-this-variable-should-be-defined-as-being-0-before-the-loop-starts-at-every-iteration-of-the-inner-loop-you-should-add-1-to-it-what-are-the-values-of-my_rows-and-my_col-when-my_position-is-3-add-a-line-to-check-the-positions-each-time-through","title":"Q14-B. Change the for loop above to include a variable <code>my_position</code>. This variable should be defined as being 0 before the loop starts. At every iteration of the inner loop, you should add 1 to it. What are the values of <code>my_rows</code> and <code>my_col</code> when <code>my_position</code> is 3? Add a line to check the positions each time through.","text":"<p>It should look something like this:</p> <pre><code># my_position defined as 0 before the loop starts\nmy_position &lt;- 0\n\n# Loop through all rows\nfor (my_row in 1:5) {\n  # Loop through all columns except the first\n  for (my_col in 2:7) {\n\n    ## Change my_position here:\n    # make my_position equal to my_position plus one\n\n    # Print all the indices here to check that you are doing the right thing\n  }\n}\n</code></pre> <p>Now that we have three indices - one going through the rows of <code>helianthus_data</code>, one going through the columns of <code>helianthus_data</code>, and one simply going from 1 to 30 - we have all the ingredients we need to populate the matrix <code>long_data</code>. The code we need at each iteration of the loop is the following:</p> <pre><code># Get Count\nlong_data[my_position, 3] &lt;- helianthus_data[my_row, my_col]\n</code></pre> <p>This is fairly straightforward. We also want to drop the time point in the second column of <code>long_data</code>. Although we do not have a vector describing each of the time points, in fact the timings are very simply given by 'my_col minus two'. For example, if we are looking at the fourth column then we are looking at the second time point. Therefore, we need the following line of code to extract the timings:</p> <pre><code># Get Time\nlong_data[my_position, 2] &lt;- my_col - 2\n</code></pre> <p>Finally, we want to drop the strain type into the first column of <code>long_data</code>. The strain type is given by the first element in every row, meaning it is given by <code>helianthus_data[my_rows, 1]</code>. Therefore, we need the following line of code to extract the strain types:</p> <pre><code># Get Strain\nlong_data[my_position, 1] &lt;- helianthus_data[my_rows, 1]\n</code></pre>"},{"location":"practicals/pt-2/#q14-c-bring-all-of-this-together-to-finish-the-for-loop-and-run-it","title":"Q14-C. Bring all of this together to finish the for loop, and run it!","text":"<p>To check what you've done, you can print the start and end of long_data:</p> <pre><code>head(long_data)\ntail(long_data)\n</code></pre>"},{"location":"practicals/pt-2/#q14-d-what-can-you-do-to-reduce-the-risks-of-things-going-wrong-if-there-is-a-chance-you-may-want-to-rerun-this-loop-on-a-similar-but-slightly-different-dataset","title":"Q14-D. What can you do to reduce the risks of things going wrong if there is a chance you may want to rerun this loop on a similar but slightly different dataset?","text":""},{"location":"practicals/pt-2/#hacker-section-working-with-dna-data","title":"Hacker section: Working with DNA data","text":""},{"location":"practicals/pt-2/#bonus-q15-a-write-a-function-that-converts-a-short-dna-sequence-of-15-bases-eg-acctgtcatcatccc-to-rna-and-splits-the-string-into-codon-triplets-you-will-need-to","title":"Bonus Q15-A. Write a function that converts a short DNA sequence of 15 bases (e.g. \"ACCTGTCATCATCCC\") to RNA and splits the string into codon triplets. You will need to:","text":"<ul> <li>load the data into R: <code>dna_string &lt;- scan(\"https://wurmlab.github.io/SBC361-programming-in-R/public/sequence.txt\", what = character())</code></li> <li>replace T with U  (thymine with uracil to convert DNA to RNA)</li> <li>use <code>substring()</code> to split the sequence into triplets and <code>seq()</code> within <code>substring()</code></li> <li>return the RNA triplets string</li> </ul> <p>Note <code>substring()</code> takes a 'first' and 'last' argument. The 'first' would be a sequence indicating where the beginnings of your triplets are. The 'last' argument would be a sequence indicating where the ends of your triplets are.  In <code>seq()</code> you will also indicate you want triplets.</p> <p>As an example:</p> <pre><code>dna_string &lt;- c(\"AAATTT\")\nsubstring(dna_string, seq(from = 1, to = 4, by = 3), seq(from = 3, to = 6, by = 3))\n</code></pre>"},{"location":"practicals/pt-2/#bonus-q15-b-once-you-have-created-the-function-see-if-you-can-modify-it-to-work-for-a-sequence-with-any-number-of-characters-tip-you-can-use-nchar-to-create-a-variable-such-as-num_characters","title":"Bonus Q15-B. Once you have created the function, see if you can modify it to work for a sequence with any number of characters. Tip: you can use <code>nchar()</code> to create a variable such as <code>num_characters</code>.","text":""},{"location":"practicals/pt-2/#bonus-q16-write-a-function-to-obtain-the-reverse-complement-of-a-dna-sequence","title":"Bonus Q16. Write a function to obtain the reverse-complement of a DNA sequence.","text":"<p>You can use this sequence (copy and paste it into R): <code>\"ATTACGACGCGATTCCCGGTTAATCGAATTCCCA\"</code>. As an example, the reverse-complement of ATGC is GCAT.</p> <p>The tricky part here is reversing a single string of characters. Search around for <code>strsplit</code>.  You will need to:</p> <ul> <li>replace bases with their complement (you can use <code>gsub</code>, judiciously replacing uppercase characters with lowercase characters (or vice-versa)).</li> <li>split the string of DNA bases into separate characters with <code>strsplit</code>. Unfortunately, <code>strsplit</code> confusingly returns a list, so you will need to use <code>unlist()</code> to obtain a string again.</li> <li>reverse the sequence.</li> <li>remove the spaces to get your single string of DNA bases (look into the help files for the <code>paste()</code> function).</li> <li>return the reverse-complement sequence.</li> </ul>"},{"location":"practicals/pt-2/#mastermind-q17-translate-your-triplet-string-from-q15-into-amino-acids","title":"Mastermind Q17. Translate your triplet string from Q15 into amino acids.","text":"<p>Note: depending on your method, you may not need to convert it to RNA first.  You can use a codon-to-amino-acid table and code the translation yourself. Your solution could include a function calling a function. Alternatively, you could search around and load a specific package for the manipulation of biological sequences.</p>"},{"location":"practicals/pt-2/#bringing-it-all-together","title":"Bringing it all together","text":"<p>Well done for making it this far! Now try to bring all of your knowledge together. Have another look over your previous notes and make sure these ideas are still fresh in your mind. Have a go at writing your own scripts, preferably combining a number of different concepts (for example, you could try making a function that acts on a matrix and then using this function within a loop). Another good idea would be to come up with a problem that you want to solve (either for fun or for other coursework) and then write a function that solves it.</p> <p>Many of the ideas presented in this and the last session are designed to challenge you. Do not expect to understand them from a single read through the material. Rather, you will have to play around with many different examples and applications before the penny drops completely. On the plus side, structures such as loops and functions are common to almost all programming languages, and so once you understand these concepts the world of programming is your oyster!</p>"},{"location":"practicals/pt-3/","title":"Computing in R - Practical 3","text":""},{"location":"practicals/pt-3/#introduction","title":"Introduction","text":"<p>This session will be a recap of what we saw in practical 1 and practical 2. You can also use this session to revisit the parts of the last practicals that are still not entirely clear. REMEMBER The important thing is that you understand what you are doing. It is better to understand well a few exercises than finishing all exercises without entirely knowing what is going on.</p>"},{"location":"practicals/pt-3/#recap-questions","title":"Recap questions","text":"<p>To get back into gear in terms of thinking about programming, we\u2019ll start with a quick recap exercise of the recent material:</p>"},{"location":"practicals/pt-3/#intro-q1-what-would-be-the-outcome-of-the-code-answer-repx-c42-24-times-42-and-what-would-then-be-the-outcome-of-the-code-meananswer","title":"Intro Q1. What would be the outcome of the code <code>answer &lt;- rep(x = c(42, 24), times = 42)</code>? And what would then be the outcome of the code <code>mean(answer)</code>?","text":""},{"location":"practicals/pt-3/#intro-q2-use-the-preloaded-r-data-set-indometh-check-indometh-to-understand-more-about-the-dataset-subset-this-data-to-return-only-those-rows-for-which-the-concentration-is-strictly-between-1-and-2-what-is-the-average-mean-concentration-for-this-subset","title":"Intro Q2. Use the preloaded R data set 'Indometh' (check <code>?Indometh</code> to understand more about the dataset). Subset this data to return only those rows for which the concentration is strictly between 1 and 2. What is the average (mean) concentration for this subset?","text":""},{"location":"practicals/pt-3/#intro-q3-using-regular-expressions-how-would-you-extract-all-the-words-except-antelope-in-the-vector-ccameleopard-eop4a-kiloparsec-antelope-in-r-there-are-a-few-ways-of-getting-a-result-find-three-ways-to-answer-this-question","title":"Intro Q3. Using regular expressions, how would you extract all the words except <code>antelope</code> in the vector <code>c(\"cameleopard\", \"eop4a\", \"kiloparsec\", \"antelope\")</code>? In R, there are a few ways of getting a result. Find three ways to answer this question.","text":""},{"location":"practicals/pt-3/#intro-q4-write-a-loop-that-iterates-over-the-numbers-16-to-49-and-prints-out-the-square-root-of-the-number-each-time-through-you-may-have-to-search-around-for-the-square-root-function-yes-for-this-exercise-we-absolutely-want-you-to-write-a-loop-to-do-this-even-though-there-are-other-ways-of-getting-r-to-provide-the-same-result","title":"Intro Q4. Write a loop that iterates over the numbers 16 to 49 and prints out the square root of the number each time through (you may have to search around for the square root function). Yes, for this exercise we absolutely want you to write a loop to do this, even though there are other ways of getting R to provide the same result.","text":""},{"location":"practicals/pt-3/#intro-q5-make-the-loop-from-intro-q4-store-the-results-to-a-separate-vector-called-my_square_roots-instead-of-just-printing-the-results-whats-the-value-of-the-3rd-iteration-what-is-the-sum-of-the-square-roots-of-the-numbers-16-to-49","title":"Intro Q5. Make the loop from Intro Q4 store the results to a separate vector called <code>my_square_roots</code> instead of just printing the results. What's the value of the 3rd iteration? What is the sum of the square roots of the numbers 16 to 49?","text":""},{"location":"practicals/pt-3/#intro-q6-write-a-loop-that-iterates-over-all-even-numbers-between-30-and-90-at-each-iteration-run-your-function-to-convert-each-of-these-even-numbers-from-kilometres-into-miles-you-created-this-function-in-q2-from-practical2-the-loop-should-store-the-results-in-a-separate-vector","title":"Intro Q6. Write a loop that iterates over all even numbers between 30 and 90. At each iteration, run your function to convert each of these even numbers from kilometres into miles (you created this function in Q2 from practical2. The loop should store the results in a separate vector.","text":""},{"location":"practicals/pt-3/#intro-q7-numbers-in-fibonaccis-sequence-are-characterised-by-the-fact-that-every-number-after-the-first-two-is-the-sum-of-the-two-preceding-ones-eg-1-1-2-3-5-this-seemingly-simple-sequence-can-be-used-to-explain-different-biological-patterns-ranging-from-the-arrangement-of-leaves-on-a-stem-or-the-flowering-of-an-artichoke-to-the-patterns-of-inheritance-of-x-chromosomes-write-a-for-loop-that-calculates-the-first-20-numbers-in-a-fibonacci-sequence-starting-from-1","title":"Intro Q7. Numbers in Fibonacci's sequence are characterised by the fact that every number after the first two is the sum of the two preceding ones (e.g., 1, 1, 2, 3, 5,...). This seemingly simple sequence can be used to explain different biological patterns ranging from the arrangement of leaves on a stem or the flowering of an artichoke to the patterns of inheritance of X chromosomes. Write a <code>for</code> loop that calculates the first 20 numbers in a Fibonacci sequence starting from 1.","text":"<p>Hint - we cannot use positions equal or lower than 0 in a vector. Start with a vector containing the 2 first numbers of the sequence (1 and 1 in this case) and run through a loop starting in position 3 of your sequence to calculate the rest</p>"},{"location":"practicals/pt-3/#intro-q8-create-a-function-that-can-run-this-loop-to-generate-a-fibonacci-sequence-of-any-size-starting-from-any-given-number-ie-it-does-not-have-to-start-with-1-so-for-example-a-sequence-of-length-x-from-number-y-where-x-and-y-are-inputs-to-the-function","title":"Intro Q8. Create a function that can run this loop to generate a Fibonacci sequence of any size, starting from any given number (i.e. it does not have to start with 1). So for example, a sequence of length <code>x</code> from number <code>y</code>, where <code>x</code> and <code>y</code> are inputs to the function.","text":"<p>Hint - The starting number <code>y</code> will be the first two positions of your resulting vector</p>"},{"location":"practicals/pt-3/#palindromic-sequences","title":"Palindromic Sequences","text":"<p>Palindromes are arrangements of words or letters which read the same way whether you read them backwards or forwards, such as the phrase never odd or even (if you remove the spaces). In molecular biology, many restriction enzyme sites are palindromic,</p>"},{"location":"practicals/pt-3/#q1-write-a-function-that-assesses-whether-a-given-word-or-phrase-is-a-palindrome","title":"Q1. Write a function that assesses whether a given word or phrase is a palindrome.","text":"<p>Before starting to code, think about the steps that you would need to go through in order to judge if something is a mirror palindrome.  * Write these steps as comments in an R script window (or a piece of paper) , then think about how you can tell the computer to execute those steps.  * Only start writing the code when you have a plan of what you want to do.  * Write your code as a one-off first - without considering that you'll do a function.  * Only once you're happy with how things work, sandwich your code into a function format.  * Use easy test cases where you know the answer in order to check that your function works.</p> <p>The bottom section of the R help sheets normally have examples of how a command can be used. Sometimes one of these examples will be a way to solve the problem that you are currently working on. The <code>strsplit</code> helpsheet is particularly interesting in relation to this question.</p>"},{"location":"practicals/pt-3/#q2-palindromes-in-molecular-biology-work-a-little-differently-in-that-the-sequence-is-the-same-if-read-from-5-to-3-on-one-strand-or-from-5-to-3-on-the-complementary-strand-for-example-given-the-sequence-acctaggt-its-complement-would-be","title":"Q2. Palindromes in molecular biology work a little differently, in that the sequence is the same if read from 5\u2019 to 3\u2019 on one strand or from 5\u2019 to 3\u2019 on the complementary strand. For example, given the sequence ACCTAGGT, its complement would be:","text":"<pre><code>5\u2019 ACCTAGGT 3\u2019\n   ||||||||\n3\u2019 TGGATCCA 5\u2019\n</code></pre>"},{"location":"practicals/pt-3/#both-acctaggt-and-its-complementary-sequence-tggatcca-are-identical-if-read-from-5-to-3-that-is-acctaggt-is-a-palindromic-sequence-write-a-function-that-assesses-whether-a-dna-sequence-is-a-palindrome-you-will-need-to-convert-it-to-its-reverse-complement-and-then-compare-this-to-the-original-sequence-again-there-are-commands-which-may-help-you-in-the-working-with-dna-data-section-from-the-last-session","title":"Both ACCTAGGT and its complementary sequence TGGATCCA are identical if read from 5\u2019 to 3\u2019, that is, ACCTAGGT is a palindromic sequence. Write a function that assesses whether a DNA sequence is a palindrome. You will need to convert it to its reverse complement and then compare this to the original sequence. Again, there are commands which may help you in the \u2018Working with DNA data\u2019 section from the last session.","text":""},{"location":"practicals/pt-3/#open-reading-frames","title":"Open Reading Frames","text":"<p>Protein-coding regions in the genome can be predicted by detecting open reading frames. An open reading frame normally begins with the start codon \u2018ATG\u2019 and ends at one of three possible stop codons, \u2018TGA\u2019, \u2018TAA\u2019 and \u2018TAG\u2019. The sequence in between these two points is arranged in 3-base codons.</p>"},{"location":"practicals/pt-3/#q3-write-a-function-which-uses-regular-expressions-to-detect-if-a-given-sequence-contains-an-open-reading-frame-test-it-on-the-following-sequences","title":"Q3. Write a function which uses regular expressions to detect if a given sequence contains an open reading frame. Test it on the following sequences:","text":"<p>Hint - an open reading frame should always start with the start codon 'ATG' and end with one of the stop codons. Additionally, the length of the entire sequence should be a multiple of 3. If any of these features are not met, the sequence is not a functional open reading frame.</p> <pre><code>ATGGATTTTTAG\nATGGATTTTCTAG\nCTAATGGATTTTTGAAT\natgctaaactaa\nTCGATTAA\n</code></pre>"},{"location":"practicals/pt-3/#hacker-q4a-instead-of-having-the-function-return-whether-your-sequence-contains-an-open-reading-frame-have-the-function-return-a-string-containing-the-open-reading-frame-if-there-is-one-and-null-if-there-is-not-you-will-need-to-look-up-if-statements","title":"Hacker Q4a. Instead of having the function return whether your sequence contains an open reading frame, have the function return a string containing the open reading frame if there is one and NULL if there is not (you will need to look up \"if statements\").","text":""},{"location":"practicals/pt-3/#hacker-q4b-this-time-check-both-the-forward-and-reverse-strand-for-open-reading-frames-return-forward_only-if-there-is-an-open-reading-frame-only-on-the-forward-strand-reverse_only-if-only-on-the-reverse-both-if-in-both-or-none-if-in-neither","title":"Hacker Q4b. This time, check both the forward and reverse strand for open reading frames. Return <code>\"forward_only\"</code> if there is an open reading frame only on the forward strand, <code>\"reverse_only\"</code> if only on the reverse, <code>\"both\"</code> if in both or \"none\" if in neither.","text":""},{"location":"practicals/pt-3/#species-names","title":"Species names","text":"<p>Run the following line of code to import the <code>butterfly_sample</code> and the <code>butterfly_reference</code> data frames:</p> <pre><code>butterfly_sam_url &lt;- \"http://wurmlab.github.io/SBC361-programming-in-R/public/butterfly_sample.csv\"\nbutterfly_sample  &lt;- read.csv(file = butterfly_sam_url, header = TRUE)\n\nbutterfly_ref_url   &lt;- \"http://wurmlab.github.io/SBC361-programming-in-R/public/butterfly_reference.csv\"\nbutterfly_reference &lt;- read.csv(file = butterfly_ref_url, header = TRUE)\n</code></pre> <p>The <code>butterfly_reference</code> data frame contains the species name and the common name of a number of butterflies.</p> <p>The <code>butterfly_sample</code> data frame contains information on butterflies caught in sweep netting surveys in two locations under different pesticide treatments (locations A and B). This data was collected by multiple people, who have recorded the common names of the species that they encountered (without using a standard letter case). In order to be able to compare the diversity between the two different sites, you will need to standardise the names.</p>"},{"location":"practicals/pt-3/#q5-write-a-function-that-adds-a-new-column-in-the-data-frame-that-contains-the-correct-latin-species-name-for-each-record-in-the-butterfly_sample","title":"Q5 Write a function that adds a new column in the data frame that contains the correct Latin species name for each record in the <code>butterfly_sample</code>.","text":"<p>TIP: There are several ways to do this. Remember that R is case sensitive, so you will need to account for case differences in your function. <code>grep</code> and <code>gsub</code> both allow you to set an <code>ignore.case = TRUE</code> option. Alternately, you could use the R commands <code>toupper()</code> and <code>tolower()</code>. Use the help pages to see how these work, which you can access by typing a question mark before the command - <code>?toupper</code>.</p>"},{"location":"practicals/pt-3/#q6-from-the-data-above-which-location-has-the-greatest-number-of-different-species","title":"Q6. From the data above, which location has the greatest number of different species?","text":""},{"location":"practicals/pt-3/#q7-which-genus-has-been-caught-the-greatest-number-of-times","title":"Q7. Which genus has been caught the greatest number of times?","text":""},{"location":"practicals/pt-3/#bonus-hacker-question","title":"Bonus hacker question","text":"<p>This question is an extension of the question Q5. Again, we will analyse a data frame containing the species of butterflies observed in two locations (A and B). This time, however, some of the people who did the sampling recorded the common name of the species, while others recorded the latin name (all with inconsistent letter case).</p>"},{"location":"practicals/pt-3/#q8-write-a-script-that-adds-a-new-column-in-the-data-frame-that-contains-the-correct-latin-species-name-for-each-record-in-the-data-frame-imported-below","title":"Q8 Write a script that adds a new column in the data frame that contains the correct Latin species name for each record in the data frame imported below.","text":"<pre><code>butterfly_sam_bonus_url &lt;- \"http://wurmlab.github.io/SBC361-programming-in-R/public/butterfly_sample_bonus.csv\"\nbutterfly_sample_bonus  &lt;- read.csv(file = butterfly_sam_bonus_url, header = TRUE)\n</code></pre> <p>One of the difficulties of this exercise is that you will have to perform a different process depending on whether the sample already has its Latin name or not. You may find that using <code>if</code> statements may be helpful (which you will have to look up). Alternatively, you may want to subset the data into the two groups (where the transformation is either from Latin to Latin or common to Latin), and do the transformation independently on each.</p> <p>This question is not easy! But it is typical of the sort of thing researchers do from day to day and a very good test of all the things you have learned this year!</p>"},{"location":"practicals/pt-3/#play-time-you-can-safely-ignore-this-if-you-are-in-3rd-year","title":"Play time (you can safely ignore this if you are in 3rd year)","text":""},{"location":"practicals/pt-3/#q9-write-a-script-for-a-rock-scissors-paper-game-to-play-against-the-computer-you-will-need-to-write-it-as-a-function-eg-rock_scissors_paperyour_play","title":"Q9 Write a script for a Rock-Scissors-Paper game to play against the computer. You will need to write it as a function (e.g. <code>rock_scissors_paper(your_play)</code>).","text":"<p>NOTE: You will need to use if else statements in R. Have a look online to see how they work.</p>"},{"location":"practicals/pt-3/#q10-write-a-script-for-a-functional-conways-game-of-life-this-is-a-type-of-cellular-automata-model-where-very-simple-initial-rules-can-generate-highly-complex-patterns-to-modelsimulate-life-you-will-need-to-integrate-conways-rules-into-r","title":"Q10 Write a script for a functional Conway's Game of Life. This is a type of cellular automata model where very simple initial rules can generate highly complex patterns. To model/simulate life, you will need to integrate Conway's rules into R.","text":""}]}